# GMIT CyberSecurity : Programming for CyberSecurity, Python
# Lecturer : Andrew Beatty
#
# Term #2 Week 5. Data Analysis
#
# Task Requirement : Analyse a data set of your choosing using any python packages
#
# Data set chosen & reason :
# I chose the iris dataset because it is apparently the training wheels dataset of data science & analytics
# Comparing the data in the iris data set to some of the idr csv files provided in the incidenet, detection & response module there are obvious advantages to the iris dataset
# as a dataset for learning. The data is clean. 
# If the goal is to learn the capabilities for python packages such as pandas, numpy, matplotlib or seaborn then there is no distraction trying to eliminate bad data or outliers. 
# Additionally, the dataset is quite small and easily reviewed manually 
# It's a well analysed and reviewed data set within the data science community so it's easy to check results
#
# Finally, during the summer, I set myself the task of calculating averages, medians, modes and ranges for individual varieties and all varieties without using python packages
# I was trying to get a better handle on how lists/dictionaries worked. I wanted in this program to look at how similar or better information could be calculated using 
# python packages. The program written in the summer is called Iris4.py. To practice modules I changed this file to be a function then imported the py as a module & gave it as an
# option on my menu 
#
# Program Name : plotiris.py
#
# Program Function :
#       This program  
#            Checks for the existence of the Iris.csv file 
#            If the file exists a menu is displayed offering the following options
#               1. View Iris stats generated by pandas
#               2. View Iris stats using code that does not use python inbuilt packages, 
#                  i.e. dats is loaded in to dicts and functions were written to calculate mean, median, range & mode
#               3. View selection of panda plots
#               4. View the ultimate seaborn plot - 3 lines of code. Love it.
#
#       References :
#               w3schools - pandas
#               https://pandas.pydata.org/docs/getting_started/intro_tutorials/04_plotting.html
#               https://stackoverflow.com/questions/32244753/how-to-save-a-seaborn-plot-into-a-file (I didn't use this in the end)
#               https://docs.python.org/3/tutorial/modules.html
#               https://towardsdatascience.com/seaborn-python-8563c3d0ad41#:~:text=Seaborn%20is%20a%20data%20visualization,Pandas%20to%20learn%20about%20Seaborn.
#
#       Additional Reading :
#               https://machinelearningmastery.com/difference-test-validation-datasets/
#               https://towardsdatascience.com/exploring-classifiers-with-python-scikit-learn-iris-dataset-2bcb490d2e1b
#
#       Conclusion :
#               Writing the code by hand to generate the mean, mode, range and median was interesting but I started to lose the will to live by the time I got to standard deviation
#               I think I wrote the code such that if I had extra coffee doing standard deviation should be a neat function
#               Pandas are great for doing the dog work that was required to calculate stats without packages
#               I didn't notice an appreciable difference between the execution time for the code for the pandas summary and the summary written by hand
#               That said, the hand written summary doesn't calculate standard deviation or correlation. I need to look up how you compare run times.
#               Seaborn seems to give you quite a lot of information with very little code required 
#               You could spend a lifetime analysing datasets with different functions and plots
#
#
import os
import csv
import Iris4     # Importing Statistics calculated on Iris Dataset without the use of numpy/pandas
import pandas as pd
import numpy as np
import seaborn as sb
import matplotlib.pyplot as mplt

filename = "Iris.csv"

# Define Flower Attributes
attributes = ["sepal.length", "sepal.width", "petal.length", "petal.width"] 

# Refreshing my memory on how to do simple menus
def displayMenu():

    print("What would you like to do?")
    print("\t(s) View Iris Dataset Summary Statistics (Pandas)")
    print("\t(h) View Iris Dataset Summary Statistics (No Libraries Used)")
    print("\t(p) View Iris Dataset Sample Panda Plots ")
    print("\t(b) View Iris Dataset Sample Seaborn Plots ")
    print("\t(q) Quit")
    selected = input("Type one letter (s/h/p/b/q):").strip()
    return selected

# Let's see what kind of plots we can generate with pandas
# It is jaw dropping you can get such incredible data representation with two lines of code
def pandaPlots(filename) :

    # Open csv file containing Iris data for read
    df = pd.read_csv(filename)

    df.plot()   # This will generate a graph showing attributes across all varieties 
    mplt.show()

    # A scatter plot showing all four flower attributes for each variety
    # We want one graph showing all four attributes  for each variety

    ax = df.plot(kind = 'scatter', x = 'variety', y = 'sepal.length', color = 'r', label = 'Variety - Sepal Length') 
    df.plot(kind = 'scatter', x = 'variety', y = 'sepal.width', color = 'g', label = 'Variety - Sepal Width', ax=ax) 
    df.plot(kind = 'scatter', x = 'variety', y = 'petal.length', color = 'b', label = 'Variety - Petal Length', ax=ax) 
    df.plot(kind = 'scatter', x = 'variety', y = 'petal.width', color = 'orange', label = 'Variety - Petal Width', ax=ax) 

    ax.set_xlabel("Flower Varieties")
    ax.set_ylabel("Flower Attributes")
    mplt.show()

def seabornPlots() :
    
    seabornDS = sb.load_dataset('iris')    # Seaborn apparently has the iris dataset built in - very handy
    sb.pairplot(seabornDS, hue ="species")
    mplt.show()

# Open the Iris data file and process the data
def processFile(filename) :

    # Open csv file containing Iris data for read
    df = pd.read_csv(filename)
 
    # This loop prints avg, median, mode and range for a given attribute grouped by variety 

    for attribute in attributes :
        print("\n\t\tSummary {} by Variety\n" .format(attribute))
        print(df.groupby("variety")[attribute].describe())

    # This set of calculations provides avg, median, mode and range across all varieties

    for attribute in attributes :

        print("\t\tSummary Statistics for {}  All Varieties \n" .format(attribute))
        print("Average : {}" .format(df[attribute].mean()))
        print("Standard Deviation : {}" .format(df[attribute].std()))
        print("Median : {}" .format(df[attribute].median()))
        # Note if there are multiple modes the index is listed for each mode
        print("Mode : \n{}" .format(df[attribute].mode().to_string())) # This particular result seemed to print dtype float 64 in addition to the data. Using to_string elimated it
        print("Range : {} - {} \n" .format(df[attribute].min(), df[attribute].max()))

    # This statement will calculate the correlation between all columns
    print(df.corr())

if __name__ == "__main__": # Are we in the main program
    if os.path.exists(filename):
        selected = displayMenu()
        while(selected != 'q'):
            if selected == 's':         # Summary Iris Stats using pandas
                processFile(filename)
            elif selected == 'h':
                Iris4.processData()     # Code to generate mean, median, range, mode without pandas - just list/dicts & processing. Contained in module Iris4.py
            elif selected == 'p':
                pandaPlots(filename)
            elif selected == 'b':
                seabornPlots()          # Seaborn appears to have it's own sample set of the Iris dataset included so no parametersn
            elif selected !='q':
               print("\n\nplease select either s,p,b or q")
            selected=displayMenu()
    else :
        print ("\nError : File does not exist \n")
